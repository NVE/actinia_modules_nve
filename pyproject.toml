[project]
name = "actinia_modules_nve"
requires-python = ">=3.10"

[tool.black]
required-version = '24'
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
# 'extend-exclude' excludes files or directories in addition to the defaults
include = '\.pyi?$'
exclude = '''
(
    # exclude directories in the root of the project
    /(
          \.eggs
        | \.git
        | \.hg
        | \.mypy_cache
        | \.tox
        | \.venv
        | _build
        | build
        | bin\..*
        | dist\..*
    )/
)
'''

[tool.ruff]
required-version = ">=0.5.2"

builtins = ["_"]

# In addition to the standard set of exclusions, omit the following files or folders.
extend-exclude = ["python/libgrass_interface_generator"]
# In addition to the standard set of inclusions, include `.ipynb` files.
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/
select = [
    "A",      # flake8-builtins (A)
    "AIR",    # Airflow (AIR)
    "ANN",    # flake8-annotations (ANN)
    "ARG",    # flake8-unused-arguments (ARG)
    "B",      # flake8-bugbear (B)
    "BLE",    # flake8-blind-except (BLE)
    "C4",     # flake8-comprehensions (C4)
    "COM",    # flake8-commas (COM)
    "D",      # pydocstyle (D)
    "DTZ",    # flake8-datetimez (DTZ)
    "E4",     # pycodestyle (E, W)
    "E7",     # pycodestyle (E, W)
    "E9",     # pycodestyle (E, W)
    "F",      # Pyflakes (F)
    "FA",     # flake8-future-annotations (FA)
    "FBT",    # flake8-boolean-trap (FBT)
    "FLY",    # flynt (FLY)
    "FURB",   # refurb (FURB)
    "G",      # flake8-logging-format (G)
    "I",      # isort (I)
    "ICN",    # flake8-import-conventions (ICN)
    "INT",    # flake8-gettext (INT)
    "ISC",    # flake8-implicit-str-concat (ISC)
    "LOG",    # flake8-logging (LOG)
    "NPY",    # NumPy-specific rules (NPY)
    "PERF",   # Perflint (PERF)
    "PGH",    # pygrep-hooks (PGH)
    "PIE",    # flake8-pie (PIE)
    "PLC",    # Pylint (PL) Convention (C)
    "PLE",    # Pylint (PL) Error (E)
    "PLR",    # Pylint (PL) Refactor (R)
    "PLW",    # Pylint (PL) Warning (W)
    "PT",     # flake8-pytest-style (PT)
    "PTH",    # flake8-use-pathlib (PTH)
    "PYI",    # flake8-pyi (PYI)
    "Q",      # flake8-quotes (Q)
    "RET",    # flake8-return (RET)
    "RSE",    # flake8-raise (RSE)
    "RUF",    # Ruff-specific rules (RUF)
    "S",      # flake8-bandit (S)
    "SIM",    # flake8-simplify (SIM)
    "SLF",    # flake8-self (SLF)
    "SLOT",   # flake8-slots (SLOT)
    "T10",    # flake8-debugger (T10)
    "TCH",    # flake8-type-checking (TCH)
    "TID",    # flake8-tidy-imports (TID)
    "TRY",    # tryceratops (TRY)
    "UP",     # pyupgrade (UP)
    "W",      # pycodestyle (E, W)
    "YTT",    # flake8-2020 (YTT)
]

ignore = [
    # See https://docs.astral.sh/ruff/rules/
    # *GRASS TODO: fix the issues, or use https://docs.astral.sh/ruff/settings/#lint_per-file-ignores
    "A001",    # builtin-variable-shadowing
    "A002",    # builtin-argument-shadowing
    "ANN",     # flake8-annotations (ANN)
    "ARG001",  # unused-function-argument
    "BLE001",  # blind-except
    "C405",    # unnecessary-literal-set
    "C416",    # unnecessary-comprehension
    "COM812",  # missing-trailing-comma
    "D1",
    "D2",
    "D400",    # ends-in-period
    "D401",    # non-imperative-mood
    "D402",    # no-signature
    "D403",    # first-line-capitalized
    "D404",    # docstring-starts-with-this
    "D405",    # capitalize-section-name
    "D406",    # new-line-after-section-name
    "D407",    # dashed-underline-after-section
    "D409",    # section-underline-matches-section-length
    "D411",    # no-blank-line-before-section
    "D412",    # blank-lines-between-header-and-content
    "D413",    # blank-line-after-last-section
    "D415",    # ends-in-punctuation
    "D416",    # section-name-ends-in-colon
    "D419",    # empty-docstring
    "DTZ001",  # call-datetime-without-tzinfo
    "DTZ002",  # call-datetime-today
    "DTZ005",  # call-datetime-now-without-tzinfo
    "DTZ007",  # call-datetime-strptime-without-zone
    "E722",    # bare-except
    "F841",    # unused-variable,
    "FBT001",  # boolean-type-hint-positional-argument
    "FBT002",  # boolean-default-value-positional-argument
    "FBT003",  # boolean-positional-value-in-call
    "PERF203", # try-except-in-loop
    "PLC0206", # dict-index-missing-items
    "PLC0415", # import-outside-top-level
    "PLC1901", # compare-to-empty-string
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0914", # too-many-locals
    "PLR0915", # too-many-statements
    "PLR0917", # too-many-positional
    "PLR1702", # too-many-nested-blocks
    "PLR1733", # unnecessary-dict-index-lookup
    "PLR2004", # magic-value-comparison
    "PLR5501", # collapsible-else-if
    "PLR6104", # non-augmented-assignment
    "PLR6201", # literal-membership
    "PLR6301", # no-self-use
    "PLW0127", # self-assigning-variable
    "PLW0406", # import-self
    "PLW0602", # global-variable-not-assigned
    "PLW0603", # global-statement
    "PLW0604", # global-at-module-level
    "PLW1508", # invalid-envvar-default
    "PLW1510", # subprocess-run-without-check
    "PLW1514", # unspecified-encoding
    "PLW1641", # eq-without-hash
    "PLW2901", # redefined-loop-name
    "PT001",   # pytest-fixture-incorrect-parentheses-style
    "PT004",   # pytest-missing-fixture-name-underscore
    "PT006",   # pytest-parametrize-names-wrong-type
    "PT009",   # pytest-unittest-assertion
    "PT011",   # pytest-raises-too-broad
    "PT018",   # pytest-composite-assertion
    "PT023",   # pytest-incorrect-mark-parentheses-style
    "PTH111",  # os-path-expanduser
    "PTH123",  # builtin-open
    "RET503", # implicit-return
    "RUF002",  # ambiguous-unicode-character-docstring
    "RUF003",  # ambiguous-unicode-character-comment
    "RUF015",  # unnecessary-iterable-allocation-for-first-element
    "RUF100",  # unused-noqa
    "S101",    #assert
    "S108",    # hardcoded-temp-file
    "S110",    # try-except-pass
    "S310",    # suspicious-url-open-usage
    "S324",    # hashlib-insecure-hash-function
    "S404",    # suspicious-subprocess-import
    "S608",    # hardcoded-sql-expression
    "SIM105",  # suppressible-exception
    "SLF001",  # private-member-access
    "TRY002",  # raise-vanilla-class
    "TRY003",  # raise-vanilla-args
    "TRY300",  # try-consider-else
    "UP031",   # printf-string-formatting
]


[tool.ruff.lint.per-file-ignores]
# See https://docs.astral.sh/ruff/settings/#lint_per-file-ignores
# "INT002", # f-string-in-get-text-func-call
# "INT001", # format-in-get-text-func-call
# "INT003", # printf-in-get-text-func-call
# Ignore `E402` (import violations) in all `__init__.py` files
"*/testsuite/**.py" = ["PT009", "PT027"]
"__init__.py" = ["E402"]
"src/temporal/t.import.hrsi/t.import.hrsi.py" = ["S105", "S107", "S320"]
"src/temporal/t.rast.aggregate.condition/t.rast.aggregate.condition.py" = ["SLF001"]
"src/temporal/t.rast.aggregate.patch/t.rast.aggregate.patch.py" = ["SLF001"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# Declare a custom aliases, checked with rule ICN001
"grass.script" = "gs"

[tool.pytest.ini_options]
minversion = "6.0"
python_files = "*/tests/*_test.py"
addopts = """
    --ignore-glob='dist.*'
    --ignore-glob='bin.*'
    --ignore-glob='*/tests/data/*'
    --ignore-glob='*/grass/pygrass/tests/*'
    --doctest-glob='*doctest*.txt'
"""
timeout = 300
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "needs_solo_run: marks tests that must be run without any other tests running in parallel",
]


[tool.bandit]
exclude_dirs = [
    "./testsuite",
    "*/tests/*",
    "*/testsuite/*",
]
skips = ["B324", "B110", "B101", "B112", "B311", "B404", "B603"]
